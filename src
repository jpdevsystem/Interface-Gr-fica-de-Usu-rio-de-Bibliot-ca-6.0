import sqlite3
import tkinter as tk
from tkinter import messagebox
from datetime import datetime

# Função para conectar ao banco de dados
def connect_db():
    conn = sqlite3.connect('biblioteca.db')
    cursor = conn.cursor()
    return conn, cursor

# Função para calcular multas
def calcular_multa(data_devolucao):
    hoje = datetime.now()
    data_dev = datetime.strptime(data_devolucao, '%Y-%m-%d')
    dias_atraso = (hoje - data_dev).days
    if dias_atraso > 0:
        multa = dias_atraso * 2  # Por exemplo, R$2 por dia de atraso
    else:
        multa = 0
    return multa

# Função para adicionar autor
def add_autor():
    nome = entry_nome_autor.get()
    nacionalidade = entry_nacionalidade_autor.get()
    if not nome or not nacionalidade:
        messagebox.showwarning('Erro', 'Preencha todos os campos!')
        return
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Autores (Nome, Nacionalidade) VALUES (?, ?)', (nome, nacionalidade))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor adicionado com sucesso!')
    entry_nome_autor.delete(0, tk.END)
    entry_nacionalidade_autor.delete(0, tk.END)

# Função para adicionar livro
def add_livro():
    titulo = entry_titulo_livro.get()
    autor_nome = entry_autor_nome.get()
    ano = entry_ano_livro.get()
    genero = entry_genero_livro.get()
    if not titulo or not autor_nome or not ano or not genero:
        messagebox.showwarning('Erro', 'Preencha todos os campos!')
        return
    conn, cursor = connect_db()
    
    # Buscar AutorID pelo nome
    cursor.execute('SELECT ID FROM Autores WHERE Nome = ?', (autor_nome,))
    autor = cursor.fetchone()
    if not autor:
        messagebox.showwarning('Erro', 'Autor não encontrado!')
        return
    
    autor_id = autor[0]
    cursor.execute('INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero, Disponivel) VALUES (?, ?, ?, ?, 1)',
                   (titulo, autor_id, ano, genero))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro adicionado com sucesso!')
    entry_titulo_livro.delete(0, tk.END)
    entry_autor_nome.delete(0, tk.END)
    entry_ano_livro.delete(0, tk.END)
    entry_genero_livro.delete(0, tk.END)

# Função para adicionar empréstimo
def add_emprestimo():
    livro_titulo = entry_livro_titulo.get()
    data_emp = entry_data_emp.get()
    data_dev = entry_data_dev.get()
    usuario = entry_nome_usuario.get()
    if not livro_titulo or not data_emp or not data_dev or not usuario:
        messagebox.showwarning('Erro', 'Preencha todos os campos!')
        return
    conn, cursor = connect_db()
    
    # Buscar LivroID pelo título
    cursor.execute('SELECT ID, Disponivel FROM Livros WHERE Titulo = ?', (livro_titulo,))
    livro = cursor.fetchone()
    if not livro:
        messagebox.showwarning('Erro', 'Livro não encontrado!')
        return
    
    livro_id = livro[0]
    disponivel = livro[1]
    if not disponivel:
        messagebox.showwarning('Erro', 'Livro não está disponível no momento!')
        return
    
    cursor.execute('INSERT INTO Emprestimos (LivroID, DataEmprestimo, DataDevolucao, NomeUsuario, Multa) VALUES (?, ?, ?, ?, 0)',
                   (livro_id, data_emp, data_dev, usuario))
    cursor.execute('UPDATE Livros SET Disponivel = 0 WHERE ID = ?', (livro_id,))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Empréstimo adicionado com sucesso!')
    entry_livro_titulo.delete(0, tk.END)
    entry_data_emp.delete(0, tk.END)
    entry_data_dev.delete(0, tk.END)
    entry_nome_usuario.delete(0, tk.END)

# Função para finalizar empréstimo e calcular multa
def finalizar_emprestimo():
    selected = emprestimos_list.curselection()
    if not selected:
        messagebox.showwarning('Erro', 'Selecione um empréstimo para finalizar!')
        return
    emprestimo_id = emprestimos_list.get(selected)[0]
    conn, cursor = connect_db()
    
    # Buscar informações do empréstimo
    cursor.execute('SELECT LivroID, DataDevolucao FROM Emprestimos WHERE ID = ?', (emprestimo_id,))
    emprestimo = cursor.fetchone()
    livro_id = emprestimo[0]
    data_devolucao = emprestimo[1]
    
    # Calcular multa
    multa = calcular_multa(data_devolucao)
    cursor.execute('UPDATE Emprestimos SET Multa = ? WHERE ID = ?', (multa, emprestimo_id))
    
    # Tornar o livro disponível novamente
    cursor.execute('UPDATE Livros SET Disponivel = 1 WHERE ID = ?', (livro_id,))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', f'Empréstimo finalizado com multa de R${multa:.2f}!')
    view_emprestimos()

# Função para visualizar histórico de empréstimos por usuário
def view_historico():
    usuario = entry_filter_usuario.get()
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos WHERE NomeUsuario = ?', (usuario,))
    historico = cursor.fetchall()
    conn.close()
    emprestimos_list.delete(0, tk.END)
    for emp in historico:
        emprestimos_list.insert(tk.END, emp)

# Função para visualizar empréstimos pendentes
def view_pendentes():
    conn, cursor = connect_db()
    cursor.execute('SELECT * FROM Emprestimos WHERE DataDevolucao < date("now")')
    pendentes = cursor.fetchall()
    conn.close()
    pendentes_list.delete(0, tk.END)
    for emp in pendentes:
        pendentes_list.insert(tk.END, emp)

# Função de login
def login():
    senha = entry_senha.get()
    if senha == "biblioteca2024":
        messagebox.showinfo('Sucesso', 'Login bem-sucedido!')
        login_window.destroy()  # Fecha a janela de login
        iniciar_sistema_biblioteca()  # Inicia o sistema principal
    else:
        messagebox.showwarning('Erro', 'Senha incorreta!')

# Função para iniciar o sistema de biblioteca
def iniciar_sistema_biblioteca():
    root = tk.Tk()
    root.title('Sistema de Biblioteca')

    # Frame para adicionar autores
    frame_autor = tk.LabelFrame(root, text='Adicionar Autor')
    frame_autor.grid(row=0, column=0, padx=10, pady=10)

    tk.Label(frame_autor, text='Nome:').grid(row=0, column=0)
    entry_nome_autor = tk.Entry(frame_autor)
    entry_nome_autor.grid(row=0, column=1)

    tk.Label(frame_autor, text='Nacionalidade:').grid(row=1, column=0)
    entry_nacionalidade_autor = tk.Entry(frame_autor)
    entry_nacionalidade_autor.grid(row=1, column=1)

    tk.Button(frame_autor, text='Adicionar Autor', command=add_autor).grid(row=2, columnspan=2, pady=5)

    # Frame para adicionar livros
    frame_livro = tk.LabelFrame(root, text='Adicionar Livro')
    frame_livro.grid(row=1, column=0, padx=10, pady=10)

    tk.Label(frame_livro, text='Título:').grid(row=0, column=0)
    entry_titulo_livro = tk.Entry(frame_livro)
    entry_titulo_livro.grid(row=0, column=1)

    tk.Label(frame_livro, text='Nome Autor:').grid(row=1, column=0)
    entry_autor_nome = tk.Entry(frame_livro)
    entry_autor_nome.grid(row=1, column=1)

    tk.Label(frame_livro, text='Ano Publicação:').grid(row=2, column=0)
    entry_ano_livro = tk.Entry(frame_livro)
    entry_ano_livro.grid(row=2, column=1)

    tk.Label(frame_livro, text='Gênero:').grid(row=3, column=0)
    entry_genero_livro = tk.Entry(frame_livro)
    entry_genero_livro.grid(row=3, column=1)

    tk.Button(frame_livro, text='Adicionar Livro', command=add_livro).grid(row=4, columnspan=2, pady=5)

    # Frame para adicionar empréstimos
    frame_emprestimo = tk.LabelFrame(root, text='Adicionar Empréstimo')
    frame_emprestimo.grid(row=2, column=0, padx=10, pady=10)

    tk.Label(frame_emprestimo, text='Título Livro:').grid(row=0, column=0)
    entry_livro_titulo = tk.Entry(frame_emprestimo)
    entry_livro_titulo.grid(row=0, column=1)

    tk.Label(frame_emprestimo, text='Data Empréstimo (YYYY-MM-DD):').grid(row=1, column=0)
    entry_data_emp = tk.Entry(frame_emprestimo)
    entry_data_emp.grid(row=1, column=1)

    tk.Label(frame_emprestimo, text='Data Devolução (YYYY-MM-DD):').grid(row=2, column=0)
    entry_data_dev = tk.Entry(frame_emprestimo)
    entry_data_dev.grid(row=2, column=1)

    tk.Label(frame_emprestimo, text='Nome Usuário:').grid(row=3, column=0)
    entry_nome_usuario = tk.Entry(frame_emprestimo)
    entry_nome_usuario.grid(row=3, column=1)

    tk.Button(frame_emprestimo, text='Adicionar Empréstimo', command=add_emprestimo).grid(row=4, columnspan=2, pady=5)

    # Frame para visualizar empréstimos
    frame_view = tk.LabelFrame(root, text='Visualizar Empréstimos')
    frame_view.grid(row=0, column=1, padx=10, pady=10, rowspan=3)

    emprestimos_list = tk.Listbox(frame_view, height=10, width=50)
    emprestimos_list.grid(row=0, column=0, columnspan=2)

    tk.Button(frame_view, text='Finalizar Empréstimo', command=finalizar_emprestimo).grid(row=1, column=0, pady=5)
    tk.Button(frame_view, text='Ver Histórico por Usuário', command=view_historico).grid(row=1, column=1, pady=5)

    entry_filter_usuario = tk.Entry(frame_view)
    entry_filter_usuario.grid(row=2, columnspan=2)

    # Frame para visualizar empréstimos pendentes
    frame_pendentes = tk.LabelFrame(root, text='Empréstimos Pendentes')
    frame_pendentes.grid(row=3, column=0, padx=10, pady=10)

    pendentes_list = tk.Listbox(frame_pendentes, height=10, width=50)
    pendentes_list.grid(row=0, column=0, columnspan=2)

    tk.Button(frame_pendentes, text='Ver Pendentes', command=view_pendentes).grid(row=1, columnspan=2, pady=5)

    root.mainloop()

# Janela de login
login_window = tk.Tk()
login_window.title('Login - Sistema de Biblioteca')

tk.Label(login_window, text='Digite a senha:').grid(row=0, column=0, padx=10, pady=10)
entry_senha = tk.Entry(login_window, show='*')
entry_senha.grid(row=0, column=1, padx=10, pady=10)

tk.Button(login_window, text='Entrar', command=login).grid(row=1, columnspan=2, pady=10)

login_window.mainloop()
